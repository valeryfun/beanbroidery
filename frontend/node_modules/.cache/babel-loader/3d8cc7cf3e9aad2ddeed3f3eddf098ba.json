{"ast":null,"code":"import { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS } from '../constants/userConstants';\nimport axios from 'axios';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/valery.fun/Documents/Personal/beanbroidery/frontend/src/actions/userActions.js"],"names":["USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import {\r\n\tUSER_DETAILS_FAIL,\r\n\tUSER_DETAILS_REQUEST,\r\n\tUSER_DETAILS_SUCCESS,\r\n\tUSER_LOGIN_FAIL,\r\n\tUSER_LOGIN_REQUEST,\r\n\tUSER_LOGIN_SUCCESS,\r\n\tUSER_LOGOUT,\r\n\tUSER_REGISTER_FAIL,\r\n\tUSER_REGISTER_REQUEST,\r\n\tUSER_REGISTER_SUCCESS,\r\n\tUSER_UPDATE_FAIL,\r\n\tUSER_UPDATE_REQUEST,\r\n\tUSER_UPDATE_SUCCESS\r\n} from '../constants/userConstants'\r\nimport axios from 'axios'\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_REQUEST\r\n\t\t})\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/users/login',\r\n\t\t\t{\r\n\t\t\t\temail,\r\n\t\t\t\tpassword\r\n\t\t\t},\r\n\t\t\tconfig\r\n\t\t)\r\n\r\n\t\tdispatch({ type: USER_LOGIN_SUCCESS, payload: data })\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data))\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport const logout = () => dispatch => {\r\n\tlocalStorage.removeItem('userInfo')\r\n\tdispatch({ type: USER_LOGOUT })\r\n}\r\n\r\nexport const register = (name, email, password) => async dispatch => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_REGISTER_REQUEST\r\n\t\t})\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/users',\r\n\t\t\t{\r\n\t\t\t\tname,\r\n\t\t\t\temail,\r\n\t\t\t\tpassword\r\n\t\t\t},\r\n\t\t\tconfig\r\n\t\t)\r\n\r\n\t\tdispatch({ type: USER_REGISTER_SUCCESS, payload: data })\r\n\t\tdispatch({ type: USER_LOGIN_SUCCESS, payload: data })\r\n\t\tlocalStorage.setItem('userInfo', JSON.stringify(data))\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_REGISTER_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport const getUserDetails = id => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DETAILS_REQUEST\r\n\t\t})\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo }\r\n\t\t} = getState()\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst { data } = await axios.get(`/api/users/${id}`, config)\r\n\r\n\t\tdispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DETAILS_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport const updateUserProfile = user => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_REQUEST\r\n\t\t})\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo }\r\n\t\t} = getState()\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${userInfo.token}`\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst { data } = await axios.put(`/api/users/profile`, user, config)\r\n\r\n\t\tdispatch({ type: USER_UPDATE_SUCCESS, payload: data })\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_FAIL,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message\r\n\t\t})\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}